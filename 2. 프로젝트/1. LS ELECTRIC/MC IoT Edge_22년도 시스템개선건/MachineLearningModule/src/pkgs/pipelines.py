from .mc_noisetest import pipeline as pp


class Featurizing:
    def __init__(self, params):
        self.params = params

    @staticmethod
    def make_feature(pl, data_steps, feature_names, data, test_no):
        # 결과 종합
        res = pl.augment_features(
            prep_data=data_steps,
            feature_names=feature_names,
            file_names=True,
            test_no=test_no,
        )

        # 결과 정리
        df_feature = res
        df_feature["FPATH"] = df_feature.File
        df_feature["FNAME"] = df_feature.FPATH.str.extract(r"([^/]+$)")
        df_feature["DT"] = df_feature.FNAME.str.extract(r"(\d{4}-\d{2}-\d{2})")
        df_feature["HS"] = df_feature.FNAME.str.extract(
            r"\d{4}-\d{2}-\d{2}-(\d{2}-\d{2}-\d{2})"
        )[0].str.replace("-", ":")
        df_feature["DTFULL"] = (df_feature["DT"] + " " + df_feature["HS"]).astype(
            "datetime64[ns]", errors="ignore"
        )
        df_feature["LID"] = df_feature.FPATH.str.extract(r"^/[^/]+/(\d)").astype(
            int, errors="ignore"
        )
        df = df_feature.merge(
            data[["FPATH", "V", "PROB", "R", "SR", "SR_RELABELED", "TEST_NG"]]
        )
        df = df[
            [
                "FPATH",
                "TEST_NO",
                "LID",
                "DT",
                "DTFULL",
                "V",
                "PROB",
                "R",
                "SR",
                "SR_RELABELED",
                "TEST_NG",
            ]
            + feature_names
        ]
        df[feature_names] = df[feature_names].astype(float)
        return df


class FeatureD030100(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                # Read Data
                # (pr.ReadDataBlob, "File", "ReadData", None, "file"),
                (pr.ReadData, "File", "ReadData", None, "file"),
                # Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidInterval",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                # Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                (sg.Window, "Detrend", "Window", None, "by_test"),
                (sg.Cepstrum, "Window", "Cepstrum", None, "by_test"),
                # Featurization
                # - Features for Classification
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N4"],
                ),
                # - Features for TEST NG
                (
                    ft.WindowedAggregation,
                    "Detrend",
                    "FTUR_WVFM_STDDEV",
                    None,
                    "by_test",
                    params["FTUR_WVFM_STDDEV"],
                ),
                (ft.Energy, "Detrend", "FTUR_ENRG", None, "by_test"),
                (
                    ft.Triggers,
                    "GetTriggerInterval",
                    "FTUR_TRGER",
                    None,
                    "by_test",
                    params["FTUR_TRGER"],
                ),
            ]
        )

        return pl


class Feature010(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                # Read Data
                (
                    pr.ReadDataBlob,
                    "File",
                    "ReadData",
                    None,
                    "file",
                    params["ReadDataBlob"],
                ),
                # Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidInterval",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                # Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                (sg.Window, "Detrend", "Window", None, "by_test"),
                (
                    sg.FilterBandpass,
                    "GetValidInterval",
                    "FilterBandpass",
                    None,
                    "by_test",
                    {"lowcut": 3000, "highcut": 6000, "order": 5},
                ),
                (
                    sg.FilterHighpass,
                    "GetValidInterval",
                    "FilterHighpass",
                    None,
                    "by_test",
                    {"lowcut": 10000, "order": 5},
                ),
                (
                    sg.FilterLowpass,
                    "Detrend",
                    "FilterLowpass",
                    None,
                    "by_test",
                    {"highcut": 3000, "order": 5},
                ),
                (sg.Envelope, "FilterBandpass", "BFEnvelope", None, "by_test"),
                (sg.Envelope, "FilterHighpass", "HFEnvelope", None, "by_test"),
                (sg.Spectrum, "Window", "Spectrum", None, "by_test"),
                (sg.Spectrum, "HFEnvelope", "Spectrum_hfenv", None, "by_test"),
                (sg.Spectrum, "BFEnvelope", "Spectrum_bfenv", None, "by_test"),
                (sg.Spectrum, "FilterLowpass", "Spectrum_lf", None, "by_test"),
                (sg.Cepstrum, "Window", "Cepstrum", None, "by_test"),
                (sg.Cepstrum, "HFEnvelope", "Cepstrum_hfenv", None, "by_test"),
                (sg.Cepstrum, "BFEnvelope", "Cepstrum_bfenv", None, "by_test"),
                (sg.Cepstrum, "FilterLowpass", "Cepstrum_lf", None, "by_test"),
                # Featurization
                # - Features for Classification
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_MAX_N1_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_MAX_N2_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_MAX_N3_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_MAX_N4_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_CRSTFT_N1_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_CRSTFT_N2_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_CRSTFT_N3_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_CPSR_CRSTFT_N4_1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_MAX_N1_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_MAX_N2_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_MAX_N3_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_MAX_N4_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_CRSTFT_N1_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_CRSTFT_N2_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_CRSTFT_N3_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_CPSR_CRSTFT_N4_2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_MAX_N1_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_MAX_N2_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_MAX_N3_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_MAX_N4_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_CRSTFT_N1_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_CRSTFT_N2_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_CRSTFT_N3_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_CPSR_CRSTFT_N4_3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (ft.RMS, "FilterBandpass", "FTUR_BF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterHighpass", "FTUR_HF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterLowpass", "FTUR_LF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Detrend", "FTUR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum", "FTUR_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_hfenv", "FTUR_SPTRHF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_bfenv", "FTUR_SPTRBF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_lf", "FTUR_SPTRLF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum", "FTUR_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_hfenv", "FTUR_CPSRHF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_bfenv", "FTUR_CPSRBF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_lf", "FTUR_CPSRLF_RMS", "magnitude", "by_test"),
                # - Features for TEST NG
                (
                    ft.WindowedAggregation,
                    "Detrend",
                    "FTUR_WVFM_STDDEV",
                    None,
                    "by_test",
                    params["FTUR_WVFM_STDDEV"],
                ),
                (ft.Energy, "Detrend", "FTUR_ENRG", None, "by_test"),
                (
                    ft.Triggers,
                    "GetTriggerInterval",
                    "FTUR_TRGER",
                    None,
                    "by_test",
                    params["FTUR_TRGER"],
                ),
            ]
        )

        return pl


class Feature020(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                # Read Data
                (
                    pr.ReadDataBlob,
                    "File",
                    "ReadData",
                    None,
                    "file",
                    params["ReadDataBlob"],
                ),
                # Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidInterval",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                # Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                (sg.Window, "Detrend", "Window", None, "by_test"),
                (
                    sg.FilterBandpass,
                    "GetValidInterval",
                    "FilterBandpass",
                    None,
                    "by_test",
                    {"lowcut": 3000, "highcut": 6000, "order": 5},
                ),
                (
                    sg.FilterHighpass,
                    "GetValidInterval",
                    "FilterHighpass",
                    None,
                    "by_test",
                    {"lowcut": 10000, "order": 5},
                ),
                (
                    sg.FilterLowpass,
                    "Detrend",
                    "FilterLowpass",
                    None,
                    "by_test",
                    {"highcut": 3000, "order": 5},
                ),
                (sg.Envelope, "FilterBandpass", "BFEnvelope", None, "by_test"),
                (sg.Envelope, "FilterHighpass", "HFEnvelope", None, "by_test"),
                (sg.Spectrum, "Window", "Spectrum", None, "by_test"),
                (sg.Spectrum, "HFEnvelope", "Spectrum_hfenv", None, "by_test"),
                (sg.Spectrum, "BFEnvelope", "Spectrum_bfenv", None, "by_test"),
                (sg.Spectrum, "FilterLowpass", "Spectrum_lf", None, "by_test"),
                (sg.Cepstrum, "Window", "Cepstrum", None, "by_test"),
                (sg.Cepstrum, "HFEnvelope", "Cepstrum_hfenv", None, "by_test"),
                (sg.Cepstrum, "BFEnvelope", "Cepstrum_bfenv", None, "by_test"),
                (sg.Cepstrum, "FilterLowpass", "Cepstrum_lf", None, "by_test"),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
            ]
            + [
                (
                    ft.AggFrequency,
                    "Spectrum",
                    f"FTUR_SPEC_{str(freq*30).zfill(5)}",
                    "both",
                    "by_test",
                    {"freq": freq * 30, "bandwidth": 3},
                )
                for freq in range(1, 100)
            ]
        )

        return pl


class Feature030(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                ## Read Data
                (
                    pr.ReadDataBlob,
                    "File",
                    "ReadData",
                    None,
                    "file",
                    params["ReadDataBlob"],
                ),
                ## Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidInterval",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                ## Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                # [480, 960, 1440, 1920, 2400, 720, 1200, 1680, 2160, 2640, 1560]
                (
                    sg.FilterBandpass,
                    "GetValidInterval",
                    "FilterBandpass",
                    None,
                    "by_test",
                    {"lowcut": 3000, "highcut": 6000, "order": 5},
                ),
                (
                    sg.FilterHighpass,
                    "GetValidInterval",
                    "FilterHighpass",
                    None,
                    "by_test",
                    {"lowcut": 10000, "order": 5},
                ),
                (
                    sg.FilterLowpass,
                    "Detrend",
                    "FilterLowpass",
                    None,
                    "by_test",
                    {"highcut": 3000, "order": 5},
                ),
                (
                    sg.FilterComb,
                    "Detrend",
                    "FilterComb0240",
                    None,
                    "by_test",
                    {"center": 240, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterComb0240",
                    "FilterNotch0180",
                    None,
                    "by_test",
                    {"center": 180, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch0180",
                    "FilterNotch0300",
                    None,
                    "by_test",
                    {"center": 300, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch0300",
                    "FilterNotch0420",
                    None,
                    "by_test",
                    {"center": 420, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch0420",
                    "FilterNotch1560",
                    None,
                    "by_test",
                    {"center": 1560, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch1560",
                    "FilterNotch1890",
                    None,
                    "by_test",
                    {"center": 1890, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch1890",
                    "FilterNotch2650",
                    None,
                    "by_test",
                    {"center": 2650, "interval": 300},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch2650",
                    "FilterNotch2850",
                    None,
                    "by_test",
                    {"center": 2850, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch2850",
                    "FilterNotch",
                    None,
                    "by_test",
                    {"center": 5850, "interval": 300},
                ),
                (sg.Envelope, "Detrend", "Envelope", None, "by_test"),
                (sg.Envelope, "FilterBandpass", "BFEnvelope", None, "by_test"),
                (sg.Envelope, "FilterHighpass", "HFEnvelope", None, "by_test"),
                (sg.Envelope, "FilterNotch", "NFEnvelope", None, "by_test"),
                (sg.Window, "Detrend", "DetrendW", None, "by_test"),
                (sg.Window, "Envelope", "EnvelopeW", None, "by_test"),
                (sg.Window, "HFEnvelope", "HFEnvelopeW", None, "by_test"),
                (sg.Window, "BFEnvelope", "BFEnvelopeW", None, "by_test"),
                (sg.Window, "NFEnvelope", "NFEnvelopeW", None, "by_test"),
                (sg.Window, "FilterHighpass", "FilterHighpassW", None, "by_test"),
                (sg.Window, "FilterBandpass", "FilterBandpassW", None, "by_test"),
                (sg.Window, "FilterLowpass", "FilterLowpassW", None, "by_test"),
                (sg.Window, "FilterNotch", "FilterNotchW", None, "by_test"),
                (sg.Spectrum, "DetrendW", "Spectrum", None, "by_test"),
                (sg.Spectrum, "EnvelopeW", "Spectrum_env", None, "by_test"),
                (sg.Spectrum, "HFEnvelopeW", "Spectrum_hfenv", None, "by_test"),
                (sg.Spectrum, "BFEnvelopeW", "Spectrum_bfenv", None, "by_test"),
                (sg.Spectrum, "FilterLowpassW", "Spectrum_lf", None, "by_test"),
                (sg.Spectrum, "FilterNotchW", "Spectrum_nf", None, "by_test"),
                (sg.Cepstrum, "DetrendW", "Cepstrum", None, "by_test"),
                (sg.Cepstrum, "EnvelopeW", "Cepstrum_env", None, "by_test"),
                (sg.Cepstrum, "HFEnvelopeW", "Cepstrum_hfenv", None, "by_test"),
                (sg.Cepstrum, "BFEnvelopeW", "Cepstrum_bfenv", None, "by_test"),
                (sg.Cepstrum, "NFEnvelopeW", "Cepstrum_nfenv", None, "by_test"),
                (sg.Cepstrum, "FilterHighpassW", "Cepstrum_hf", None, "by_test"),
                (sg.Cepstrum, "FilterBandpassW", "Cepstrum_bf", None, "by_test"),
                (sg.Cepstrum, "FilterLowpassW", "Cepstrum_lf", None, "by_test"),
                (sg.Cepstrum, "FilterNotchW", "Cepstrum_nf", None, "by_test"),
                # - Features for Classification
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (ft.RMS, "FilterBandpass", "FTUR_BF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterHighpass", "FTUR_HF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterLowpass", "FTUR_LF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterNotch", "FTUR_NF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Detrend", "FTUR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum", "FTUR_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_hfenv", "FTUR_HF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_bfenv", "FTUR_BF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_lf", "FTUR_LF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_nf", "FTUR_NF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum", "FTUR_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_hfenv", "FTUR_HF_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_bfenv", "FTUR_BF_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_lf", "FTUR_LF_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_nf", "FTUR_NF_CPSR_RMS", "magnitude", "by_test"),
                # - Features for TEST NG
                (
                    ft.WindowedAggregation,
                    "Detrend",
                    "FTUR_WVFM_STDDEV",
                    None,
                    "by_test",
                    params["FTUR_WVFM_STDDEV"],
                ),
                (ft.Energy, "Detrend", "FTUR_ENRG", None, "by_test"),
                (
                    ft.Triggers,
                    "GetTriggerInterval",
                    "FTUR_TRGER",
                    None,
                    "by_test",
                    params["FTUR_TRGER"],
                ),
            ]
        )

        return pl


class Feature040(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                # Read Data
                (pr.ReadData, "File", "ReadData", None, "file"),
                # Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "PreEmphasisRaw",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                #             (pr.GetValidInterval,"ReadData","GetValidInterval",None,"file",params["GetValidInterval"],),
                (
                    pr.GetExactInterval,
                    "ReadData",
                    "GetValidInterval",
                    None,
                    "file",
                    {"time_from": 0.0, "time_to": 0.1, "rep_n": len(pr.test_no)},
                ),
                #             (pr.GetValidInterval,"ReadData","GetValidInterval",None,"file",{"time_from":0.0, "time_to":0.02},),
                (
                    pr.GetExactInterval,
                    "ReadData",
                    "GetNoiseInterval",
                    None,
                    "file",
                    {"time_from": 0.0, "time_to": 0.1, "rep_n": len(pr.test_no)},
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidShortInterval",
                    None,
                    "file",
                    {"time_from": 0.295, "time_to": 0.395},
                ),
                (
                    pr.GetValidIntervalDataFrame,
                    "ReadData",
                    "GetValidIntervalDataFrame",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                ## Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                (sg.Detrend, "GetNoiseInterval", "DetrendNoise", None, "by_test"),
                (sg.Detrend, "GetValidShortInterval", "DetrendShort", None, "by_test"),
                # [480, 960, 1440, 1920, 2400, 720, 1200, 1680, 2160, 2640, 1560]
                (
                    sg.FilterBandpass,
                    "GetValidInterval",
                    "FilterBandpass",
                    None,
                    "by_test",
                    {"lowcut": 3000, "highcut": 6000, "order": 5},
                ),
                (
                    sg.FilterHighpass,
                    "GetValidInterval",
                    "FilterHighpass",
                    None,
                    "by_test",
                    {"lowcut": 10000, "order": 5},
                ),
                (
                    sg.FilterLowpass,
                    "Detrend",
                    "FilterLowpass",
                    None,
                    "by_test",
                    {"highcut": 3000, "order": 5},
                ),
                (
                    sg.FilterComb,
                    "Detrend",
                    "FilterComb0240",
                    None,
                    "by_test",
                    {"center": 240, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterComb0240",
                    "FilterNotch0180",
                    None,
                    "by_test",
                    {"center": 180, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch0180",
                    "FilterNotch0300",
                    None,
                    "by_test",
                    {"center": 300, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch0300",
                    "FilterNotch0420",
                    None,
                    "by_test",
                    {"center": 420, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch0420",
                    "FilterNotch1560",
                    None,
                    "by_test",
                    {"center": 1560, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch1560",
                    "FilterNotch1890",
                    None,
                    "by_test",
                    {"center": 1890, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch1890",
                    "FilterNotch2650",
                    None,
                    "by_test",
                    {"center": 2650, "interval": 300},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch2650",
                    "FilterNotch2850",
                    None,
                    "by_test",
                    {"center": 2850, "interval": 10},
                ),
                (
                    sg.FilterNotch,
                    "FilterNotch2850",
                    "FilterNotch",
                    None,
                    "by_test",
                    {"center": 5850, "interval": 300},
                ),
                (sg.Envelope, "Detrend", "Envelope", None, "by_test"),
                (sg.Envelope, "FilterBandpass", "BFEnvelope", None, "by_test"),
                (sg.Envelope, "FilterHighpass", "HFEnvelope", None, "by_test"),
                (sg.Envelope, "FilterNotch", "NFEnvelope", None, "by_test"),
                (sg.Window, "Detrend", "DetrendW", None, "by_test"),
                (sg.Window, "DetrendNoise", "DetrendNoiseW", None, "by_test"),
                (sg.Window, "DetrendShort", "DetrendShortW", None, "by_test"),
                (sg.Window, "Envelope", "EnvelopeW", None, "by_test"),
                (sg.Window, "HFEnvelope", "HFEnvelopeW", None, "by_test"),
                (sg.Window, "BFEnvelope", "BFEnvelopeW", None, "by_test"),
                (sg.Window, "NFEnvelope", "NFEnvelopeW", None, "by_test"),
                (sg.Window, "FilterHighpass", "FilterHighpassW", None, "by_test"),
                (sg.Window, "FilterBandpass", "FilterBandpassW", None, "by_test"),
                (sg.Window, "FilterLowpass", "FilterLowpassW", None, "by_test"),
                (sg.Window, "FilterNotch", "FilterNotchW", None, "by_test"),
                (
                    sg.Spectrum,
                    "DetrendW",
                    "Spectrum",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Spectrum,
                    "DetrendNoiseW",
                    "Spectrum_noise",
                    None,
                    "by_test",
                    {"dB": True, "n_padding": 8400},
                ),
                (
                    sg.Spectrum,
                    "DetrendShortW",
                    "Spectrum_short",
                    None,
                    "by_test",
                    {"dB": True, "n_padding": 8400},
                ),
                (
                    sg.Spectrum,
                    "EnvelopeW",
                    "Spectrum_env",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Spectrum,
                    "HFEnvelopeW",
                    "Spectrum_hfenv",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Spectrum,
                    "BFEnvelopeW",
                    "Spectrum_bfenv",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Spectrum,
                    "FilterLowpassW",
                    "Spectrum_lf",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Spectrum,
                    "FilterNotchW",
                    "Spectrum_nf",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Spectrogram,
                    "DetrendNoise",
                    "Spectrogram_noise",
                    None,
                    "by_test",
                    {"nperseg": 210, "noverlap": int(210 * 0.8)},
                ),
                (
                    sg.Spectrogram,
                    "DetrendShort",
                    "Spectrogram_short",
                    None,
                    "by_test",
                    {"nperseg": 210, "noverlap": int(210 * 0.8)},
                ),
                (
                    sg.Cepstrum,
                    "DetrendW",
                    "Cepstrum",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "EnvelopeW",
                    "Cepstrum_env",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "HFEnvelopeW",
                    "Cepstrum_hfenv",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "BFEnvelopeW",
                    "Cepstrum_bfenv",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "NFEnvelopeW",
                    "Cepstrum_nfenv",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "FilterHighpassW",
                    "Cepstrum_hf",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "FilterBandpassW",
                    "Cepstrum_bf",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "FilterLowpassW",
                    "Cepstrum_lf",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "FilterNotchW",
                    "Cepstrum_nf",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                # - Features for Classification
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hf",
                    "FTUR_HF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bf",
                    "FTUR_BF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_lf",
                    "FTUR_LF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nf",
                    "FTUR_NF_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_env",
                    "FTUR_ENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_hfenv",
                    "FTUR_HFENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_bfenv",
                    "FTUR_BFENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum_nfenv",
                    "FTUR_NFENV_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.CorrSpectrograms,
                    ["Spectrogram_short", "Spectrogram_noise"],
                    "FTUR_SPECTRO_CORR",
                    "both",
                    "by_test_two_inputs",
                ),
                (
                    ft.CorrSpectrums,
                    ["Spectrum_short", "Spectrum_noise"],
                    "FTUR_SPEC_CORR",
                    "both",
                    "by_test_two_inputs",
                ),
                (ft.RMS, "FilterBandpass", "FTUR_BF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterHighpass", "FTUR_HF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterLowpass", "FTUR_LF_RMS", "magnitude", "by_test"),
                (ft.RMS, "FilterNotch", "FTUR_NF_RMS", "magnitude", "by_test"),
                (ft.RMS, "Detrend", "FTUR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum", "FTUR_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_hfenv", "FTUR_HF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_bfenv", "FTUR_BF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_lf", "FTUR_LF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum_nf", "FTUR_NF_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum", "FTUR_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_hfenv", "FTUR_HF_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_bfenv", "FTUR_BF_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_lf", "FTUR_LF_CPSR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum_nf", "FTUR_NF_CPSR_RMS", "magnitude", "by_test"),
                # - Features for TEST NG
                (
                    ft.WindowedAggregation,
                    "Detrend",
                    "FTUR_WVFM_STDDEV",
                    None,
                    "by_test",
                    params["FTUR_WVFM_STDDEV"],
                ),
                (ft.Energy, "Detrend", "FTUR_ENRG", None, "by_test"),
                (
                    ft.Triggers,
                    "GetTriggerInterval",
                    "FTUR_TRGER",
                    None,
                    "by_test",
                    params["FTUR_TRGER"],
                ),
            ]
            + [
                (
                    ft.AggFrequency,
                    "Spectrum",
                    f"FTUR_SPEC_{str(freq*30).zfill(5)}",
                    "both",
                    "by_test",
                    {"freq": freq * 30, "bandwidth": 3},
                )
                for freq in range(1, 300)
            ]
        )

        return pl


class Feature050(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                # Read Data
                (pr.ReadData, "File", "ReadData", None, "file"),
                # Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "PreEmphasisRaw",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidIntervalOrigin",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                (
                    pr.GetExactInterval,
                    "ReadData",
                    "GetNoiseInterval",
                    None,
                    "file",
                    {"time_from": 0.0, "time_to": 0.15, "rep_n": len(pr.test_no)},
                ),
                # Active Noise Canceling
                (
                    sg.FilterActiveNoiseCanceling,
                    ["GetNoiseInterval", "GetValidIntervalOrigin"],
                    "GetValidInterval",
                    None,
                    "by_test_two_inputs",
                    params["FilterActiveNoiseCanceling"],
                ),
                # Optional
                (
                    pr.GetValidIntervalDataFrame,
                    "ReadData",
                    "GetValidIntervalDataFrame",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                ## Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                (sg.Window, "Detrend", "DetrendW", None, "by_test"),
                (
                    sg.Spectrum,
                    "DetrendW",
                    "Spectrum",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "DetrendW",
                    "Cepstrum",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                # - Features for Classification
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_CRSTFT_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_CRSTFT_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N4"],
                ),
                (ft.RMS, "Detrend", "FTUR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum", "FTUR_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum", "FTUR_CPSR_RMS", "magnitude", "by_test"),
                # - Features for TEST NG
                (
                    ft.WindowedAggregation,
                    "Detrend",
                    "FTUR_WVFM_STDDEV",
                    None,
                    "by_test",
                    params["FTUR_WVFM_STDDEV"],
                ),
                (ft.Energy, "Detrend", "FTUR_ENRG", None, "by_test"),
                (
                    ft.Triggers,
                    "GetTriggerInterval",
                    "FTUR_TRGER",
                    None,
                    "by_test",
                    params["FTUR_TRGER"],
                ),
            ]
            + [
                (
                    ft.AggFrequency,
                    "Spectrum",
                    f"FTUR_SPEC_{str(freq*30).zfill(5)}",
                    "both",
                    "by_test",
                    {"freq": freq * 30, "bandwidth": 3},
                )
                for freq in range(1, 300)
            ]
        )

        return pl


class FeatureD050(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                # Read Data
                (pr.ReadData, "File", "ReadData", None, "file"),
                # Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "PreEmphasisRaw",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidIntervalOrigin",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                (
                    pr.GetExactInterval,
                    "ReadData",
                    "GetNoiseInterval",
                    None,
                    "file",
                    {"time_from": 0.0, "time_to": 0.15, "rep_n": len(pr.test_no)},
                ),
                # Active Noise Canceling
                (
                    sg.FilterActiveNoiseCanceling,
                    ["GetNoiseInterval", "GetValidIntervalOrigin"],
                    "GetValidInterval",
                    None,
                    "by_test_two_inputs",
                    params["FilterActiveNoiseCanceling"],
                ),
                ## Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                (sg.Window, "Detrend", "DetrendW", None, "by_test"),
                (
                    sg.Spectrum,
                    "DetrendW",
                    "Spectrum",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                (
                    sg.Cepstrum,
                    "DetrendW",
                    "Cepstrum",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                # - Features for Classification
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N4"],
                ),
                (ft.RMS, "Detrend", "FTUR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Spectrum", "FTUR_SPTR_RMS", "magnitude", "by_test"),
                (ft.RMS, "Cepstrum", "FTUR_CPSR_RMS", "magnitude", "by_test"),
                # - Features for TEST NG
                (
                    ft.WindowedAggregation,
                    "Detrend",
                    "FTUR_WVFM_STDDEV",
                    None,
                    "by_test",
                    params["FTUR_WVFM_STDDEV"],
                ),
                (ft.Energy, "Detrend", "FTUR_ENRG", None, "by_test"),
                (
                    ft.Triggers,
                    "GetTriggerInterval",
                    "FTUR_TRGER",
                    None,
                    "by_test",
                    params["FTUR_TRGER"],
                ),
            ]
        )

        return pl


class Feature051(Featurizing):
    def make_pipeline(self, pr, sg, ft, params=None):
        if params is None:
            params = self.params

        pl = pp.Pipeline()

        pl.make_pipes(
            [
                # Read Data
                (pr.ReadData, "File", "ReadData", None, "file"),
                # Preprocess file data to each test
                (pr.PreEmphasisRaw, "ReadData", "PreEmphasisRaw", None, "file"),
                (
                    pr.GetValidInterval,
                    "PreEmphasisRaw",
                    "GetTriggerInterval",
                    None,
                    "file",
                    params["GetTriggerInterval"],
                ),
                (
                    pr.GetValidInterval,
                    "ReadData",
                    "GetValidIntervalOrigin",
                    None,
                    "file",
                    params["GetValidInterval"],
                ),
                (
                    pr.GetExactInterval,
                    "ReadData",
                    "GetNoiseInterval",
                    None,
                    "file",
                    {"time_from": 0.0, "time_to": 0.15, "rep_n": len(pr.test_no)},
                ),
                # Active Noise Canceling
                (
                    sg.FilterActiveNoiseCanceling,
                    ["GetNoiseInterval", "GetValidIntervalOrigin"],
                    "GetValidInterval",
                    None,
                    "by_test_two_inputs",
                    params["FilterActiveNoiseCanceling"],
                ),
                # Signal Processing
                (sg.Detrend, "GetValidInterval", "Detrend", None, "by_test"),
                (sg.Window, "Detrend", "DetrendW", None, "by_test"),
                (
                    sg.Spectrum,
                    "DetrendW",
                    "Spectrum",
                    None,
                    "by_test",
                    {"n_padding": 8400, "dB": True},
                ),
                (
                    sg.Cepstrum,
                    "DetrendW",
                    "Cepstrum",
                    None,
                    "by_test",
                    {"n_padding": 8400},
                ),
                # - Features for Classification
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MAX_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MAX_N4"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N1",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N1"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N2",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N2"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N3",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N3"],
                ),
                (
                    ft.AggQuefrency,
                    "Cepstrum",
                    "FTUR_CPSR_MXRMS_N4",
                    "both",
                    "by_test",
                    params["FTUR_CPSR_MXRMS_N4"],
                ),
                (ft.RMS, "Detrend", "FTUR_RMS", "magnitude", "by_test"),
                (
                    ft.AggFrequency,
                    "Spectrum",
                    "FTUR_SPTR_1000_3000_RMS",
                    "both",
                    "by_test",
                    params["FTUR_SPTR_1000_3000_RMS"],
                ),
                (
                    ft.AggFrequency,
                    "Spectrum",
                    "FTUR_SPTR_3000_6000_RMS",
                    "both",
                    "by_test",
                    params["FTUR_SPTR_3000_6000_RMS"],
                ),
                (
                    ft.AggFrequency,
                    "Spectrum",
                    "FTUR_SPTR_6000_9000_RMS",
                    "both",
                    "by_test",
                    params["FTUR_SPTR_6000_9000_RMS"],
                ),
                # - Features for TEST NG
                (
                    ft.WindowedAggregation,
                    "Detrend",
                    "FTUR_WVFM_STDDEV",
                    None,
                    "by_test",
                    params["FTUR_WVFM_STDDEV"],
                ),
                (ft.Energy, "Detrend", "FTUR_ENRG", None, "by_test"),
                (
                    ft.Triggers,
                    "GetTriggerInterval",
                    "FTUR_TRGER",
                    None,
                    "by_test",
                    params["FTUR_TRGER"],
                ),
            ]
        )

        return pl


class FeatureDeployed(Feature051):
    """Current Deployed Feature"""